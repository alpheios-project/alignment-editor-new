<template>
  <div class="alpheios-alignment-editor-align-define-container" v-if="showAlignEditor">
    <div class ="alpheios-alignment-editor-align-define-container-view-mode">
        <div class ="alpheios-alignment-editor-align-define-container-view-mode-item alpheios-alignment-editor-align-define-container-view-mode-item-left">
          <segment-block v-for="(segment, index) in originAlignedText.segments" :key="getIndex('origin', segment.index)"
            :segment = "segment" :show-alignment="showAlignment"
            :isLast = "index === originAlignedText.segments.length-1"
            @add-hover-token="addHoverToken" @remove-hover-token="removeHoverToken"
          />
        </div>
        <div class ="alpheios-alignment-editor-align-define-container-view-mode-item">
          <div class ="alpheios-alignment-editor-align-define-container-view-mode-item-target"
               v-for="(targetData, indexT) in targetAlignedTexts" :key="indexT"
          >
            <segment-block v-for="segment in targetData.alignedText.segments" :key="getIndex('target', segment.index, targetData.targetId)"
                :segment = "segment" :show-alignment="showAlignment" :targetId = "targetData.targetId"
                @add-hover-token="addHoverToken" @remove-hover-token="removeHoverToken"
            />
          </div>
        </div>
    </div>
  </div>
</template>
<script>
import Vue from '@vue-runtime'
import SegmentBlock from '@/vue/align-editor/segment-block.vue'

export default {
  name: 'AlignEditorViewMode',
  components: {
    segmentBlock: SegmentBlock
  },
  props: {
  },
  data () {
    return {
      showAlignment: [],
      activeTargetTab: null
    }
  },
  computed: {
    /**
     * Returns originAlignedText from AlignedController
     */
    originAlignedText () {
      return this.$store.state.alignmentUpdated ? this.$alignedC.originAlignedText : {}
    },
    targetAlignedTexts () {
      const targetData = this.$alignedC.targetAlignedTexts[0]
      const data = targetData.alignedText.segments[0]
      console.info('targetAlignedTexts - ', data)
      return this.$store.state.alignmentUpdated ? this.$alignedC.targetAlignedTexts : {}
    },
    /**
     * Checks if there are enough data for rendering editors
     */
    showAlignEditor () {
      return this.$store.state.alignmentUpdated && this.$alignedC.alignedGroupsWorkflowStarted
    }
  },
  methods: {
    getIndex (textType, index, additionalIndex = 0) {
      return `${textType}-${index}-${additionalIndex}`
    },
     /**
     * Starts showing an alignment group workflow
     */
    addHoverToken (token) {
      this.showAlignment = this.$alignedC.findAlignmentGroupIds(token)
    },
    /**
     * Stops showing an alignment group workflow
     */
    removeHoverToken () {
      this.showAlignment = []
    }
  } 
}
</script>
<style lang="scss">
  .alpheios-alignment-editor-align-define-container-view-mode {
    margin-top: 15px;
    border: 1px solid #ddd;
    background: #f3f3f3;
    padding: 10px;
    text-align: center;
    
    .alpheios-alignment-editor-align-define-container-view-mode-item {
        width: 49%;
        display: inline-block;
        text-align: left;
        vertical-align: top;

        .alpheios-alignment-editor-align-define-container-view-mode-item-left {
            border-right: 2px solid  #ddd;
        }
    }
  }
</style>
